import random
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from init import dp, bot

class Main(StatesGroup):
    start = State()




async def one_of_hundred(message: types.Message, state: FSMContext):
    selected_number = random.randint(1, 100)

    selected_number = str(selected_number)

    await state.update_data(the_num=selected_number)

    msg = "—á—Ç–æ–±—ã –≤—ã —É–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ —è –Ω–µ –∂—É–ª—å–Ω–∏—á–∞—é, "
    msg += "—è —Å—Ä–∞–∑—É —Ç—É—Ç –Ω–∞–ø–∏—à—É, –∫–∞–∫–æ–π –Ω–æ–º–µ—Ä –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π: \n\n"
    msg += f" || {selected_number} || \n\n"
    msg += "–Ω–µ –Ω—É–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å\\. –ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ –∏–≥—Ä—ã"


    await bot.send_message(message.from_user.id, msg, parse_mode='MarkdownV2')

    msg2 = "—Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100)"
    await bot.send_message(message.from_user.id, msg2)
    await state.set_state(Main.start)


@dp.message(StateFilter(Main.start))
async def start(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, f"–≤—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}, –∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 99% –≤—ã –æ—à–∏–±–ª–∏—Å—å üòÅ")
    await bot.send_message(message.from_user.id, f"—Ç–µ–ø–µ—Ä—å —É–±–µ—Ä—ë–º –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ 98 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö")

    data = await state.get_data()
    the_num = data['the_num']
    won = ''
    if the_num == message.text:
        won = 'won'
    else:
        won = 'nope'

    # –ó–∞–¥–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –≤—ã–±–æ—Ä–∞
    excluded_numbers = [int(message.text)]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100 –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
    available_numbers = [number for number in range(1, 101) if number not in excluded_numbers]

    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∏—Å–µ–ª
    selected_number_except_excluded = random.choice(available_numbers)

    selected_number_except_excluded
    await bot.send_message(message.from_user.id, f"—è –æ—Å—Ç–∞–≤–∏–ª –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º - {selected_number_except_excluded}")

    builder = InlineKeyboardBuilder()
    if won == 'won':
        builder.add(InlineKeyboardButton(
            text="–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä –ø—Ä–µ–∂–Ω–∏–º",
            callback_data=f"hundFinish same won {message.text}")
        )
        builder.add(InlineKeyboardButton(
            text="–ø–æ–º–µ–Ω—è—Ç—å –≤—ã–±–æ—Ä",
            callback_data=f"hundFinish changed lost {selected_number_except_excluded}")
        )
    else:
        builder.add(InlineKeyboardButton(
            text="–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä –ø—Ä–µ–∂–Ω–∏–º",
            callback_data=f"hundFinish same lost {message.text}")
        )
        builder.add(InlineKeyboardButton(
            text="–ø–æ–º–µ–Ω—è—Ç—å –≤—ã–±–æ—Ä",
            callback_data=f"hundFinish changed won {selected_number_except_excluded}")
        )

    builder.adjust(1)
    await bot.send_message(message.from_user.id, f"—Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä –ø—Ä–µ–∂–Ω–∏–º?", reply_markup=builder.as_markup())
    await state.clear()


@dp.callback_query(F.data.startswith("hundFinish"))
async def hundFinish(callback: CallbackQuery):
    _, changed_or_same, itog, choice = callback.data.split(" ")

    if changed_or_same == 'same':
        msg = f"–≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –≤—ã–±–æ—Ä –ø—Ä–µ–∂–Ω–∏–º - {choice}. "
        msg += f"–í–∞—à —à–∞–Ω—Å —É–≥–∞–¥–∞—Ç—å –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º - 1/100"
        await bot.send_message(callback.from_user.id, msg)

    if changed_or_same == 'changed':
        msg = f"–≤—ã –ø–æ–º–µ–Ω—è–ª–∏ –≤—ã–±–æ—Ä –Ω–∞ {choice}. "
        msg += f"–í–∞—à —à–∞–Ω—Å —É–≥–∞–¥–∞—Ç—å –ø—Ä–∏ —ç—Ç–æ–º –≤–æ–∑—Ä–æ—Å - 99%"
        await bot.send_message(callback.from_user.id, msg)

    if itog == 'lost':
        msg = '–≤ –∏—Ç–æ–≥–µ –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, –±—ã–≤–∞–µ—Ç'
        await bot.send_message(callback.from_user.id, msg)
    if itog == 'won':
        msg = '–≤ –∏—Ç–æ–≥–µ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏'
        await bot.send_message(callback.from_user.id, msg)
